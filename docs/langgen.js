// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	matchedLeft() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	matchedRight() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	matchedPos() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	split(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	replace(s,by) {
		return s.replace(this.r,by);
	}
	map(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	static escape(s) {
		return s.replace(EReg.escapeRe,"\\$&");
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class _$EnumValue_EnumValue_$Impl_$ {
	static match(this1,pattern) {
		return false;
	}
}
$hxClasses["_EnumValue.EnumValue_Impl_"] = _$EnumValue_EnumValue_$Impl_$;
_$EnumValue_EnumValue_$Impl_$.__name__ = "_EnumValue.EnumValue_Impl_";
class HxOverrides {
	static dateStr(date) {
		var m = date.getMonth() + 1;
		var d = date.getDate();
		var h = date.getHours();
		var mi = date.getMinutes();
		var s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static strDate(s) {
		switch(s.length) {
		case 8:
			var k = s.split(":");
			var d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			var k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			var k2 = s.split(" ");
			var y = k2[0].split("-");
			var t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw new js__$Boot_HaxeError("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static indexOf(a,obj,i) {
		var len = a.length;
		if(i < 0) {
			i += len;
			if(i < 0) {
				i = 0;
			}
		}
		while(i < len) {
			if(((a[i]) === obj)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static lastIndexOf(a,obj,i) {
		var len = a.length;
		if(i >= len) {
			i = len - 1;
		} else if(i < 0) {
			i += len;
		}
		while(i >= 0) {
			if(((a[i]) === obj)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class IntIterator {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
	hasNext() {
		return this.min < this.max;
	}
	next() {
		return this.min++;
	}
}
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
Object.assign(IntIterator.prototype, {
	__class__: IntIterator
	,min: null
	,max: null
});
Math.__name__ = "Math";
class Reflect {
	static hasField(o,field) {
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	static setField(o,field,value) {
		o[field] = value;
	}
	static getProperty(o,field) {
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static callMethod(o,func,args) {
		return func.apply(o,args);
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		var t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
	static copy(o) {
		if(o == null) {
			return null;
		}
		var o2 = { };
		var _g = 0;
		var _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
	static makeVarArgs(f) {
		return function() {
			var a = Array.prototype.slice.call(arguments);
			return f(a);
		};
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static is(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static downcast(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static instance(value,c) {
		return js_Boot.__downcastCheck(value,c) ? value : null;
	}
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static int(x) {
		return x | 0;
	}
	static parseInt(x) {
		if(x != null) {
			var _g = 0;
			var _g1 = x.length;
			while(_g < _g1) {
				var i = _g++;
				var c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static parseFloat(x) {
		return parseFloat(x);
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
	get_length() {
		return this.b.length;
	}
	add(x) {
		this.b += Std.string(x);
	}
	addChar(c) {
		this.b += String.fromCodePoint(c);
	}
	addSub(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	toString() {
		return this.b;
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
	,__properties__: {get_length: "get_length"}
});
class haxe_SysTools {
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		}
		if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		}
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
			var result_b = "";
			var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
			if(needquote) {
				result_b += "\"";
			}
			var bs_buf = new StringBuf();
			var _g = 0;
			var _g1 = argument.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = HxOverrides.cca(argument,i);
				if(_g2 == null) {
					var c = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g2) {
					case 34:
						var bs = bs_buf.b;
						result_b += bs == null ? "null" : "" + bs;
						result_b += bs == null ? "null" : "" + bs;
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						var c1 = _g2;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c1);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument = result_b;
		}
		if(escapeMetaCharacters) {
			var result_b1 = "";
			var _g3 = 0;
			var _g11 = argument.length;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var c2 = HxOverrides.cca(argument,i1);
				if(haxe_SysTools.winMetaCharacters.indexOf(c2) >= 0) {
					result_b1 += String.fromCodePoint(94);
				}
				result_b1 += String.fromCodePoint(c2);
			}
			return result_b1;
		} else {
			return argument;
		}
	}
}
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
class StringTools {
	static urlEncode(s) {
		return encodeURIComponent(s);
	}
	static urlDecode(s) {
		return decodeURIComponent(s.split("+").join(" "));
	}
	static htmlEscape(s,quotes) {
		var buf_b = "";
		var _g_offset = 0;
		var _g_s = s;
		while(_g_offset < _g_s.length) {
			var s1 = _g_s;
			var index = _g_offset++;
			var c = s1.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
			}
			var c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			var code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static htmlUnescape(s) {
		return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
	}
	static contains(s,value) {
		return s.indexOf(value) != -1;
	}
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		var elen = end.length;
		var slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		var s = "";
		var hexChars = "0123456789ABCDEF";
		while(true) {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
			if(!(n > 0)) {
				break;
			}
		}
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
	static fastCodeAt(s,index) {
		return s.charCodeAt(index);
	}
	static iterator(s) {
		return new haxe_iterators_StringIterator(s);
	}
	static keyValueIterator(s) {
		return new haxe_iterators_StringKeyValueIterator(s);
	}
	static isEof(c) {
		return c != c;
	}
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		} else {
			return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
		}
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		var argument1 = argument;
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
			var result_b = "";
			var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
			if(needquote) {
				result_b += "\"";
			}
			var bs_buf = new StringBuf();
			var _g = 0;
			var _g1 = argument1.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = HxOverrides.cca(argument1,i);
				if(_g2 == null) {
					var c = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g2) {
					case 34:
						var bs = bs_buf.b;
						result_b += Std.string(bs);
						result_b += Std.string(bs);
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						var c1 = _g2;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c1);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument1 = result_b;
		}
		if(escapeMetaCharacters) {
			var result_b1 = "";
			var _g3 = 0;
			var _g11 = argument1.length;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var c2 = HxOverrides.cca(argument1,i1);
				if(haxe_SysTools.winMetaCharacters.indexOf(c2) >= 0) {
					result_b1 += String.fromCodePoint(94);
				}
				result_b1 += String.fromCodePoint(c2);
			}
			return result_b1;
		} else {
			return argument1;
		}
	}
	static utf16CodePointAt(s,index) {
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		return c;
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
class Type {
	static getClass(o) {
		return js_Boot.getClass(o);
	}
	static getEnum(o) {
		if(o == null) {
			return null;
		}
		return $hxEnums[o.__enum__];
	}
	static getSuperClass(c) {
		return c.__super__;
	}
	static getClassName(c) {
		return c.__name__;
	}
	static getEnumName(e) {
		return e.__ename__;
	}
	static resolveClass(name) {
		return $hxClasses[name];
	}
	static resolveEnum(name) {
		return $hxEnums[name];
	}
	static createInstance(cl,args) {
		return new (Function.prototype.bind.apply(cl,[null].concat(args)));
	}
	static createEmptyInstance(cl) {
		return Object.create(cl.prototype);
	}
	static createEnum(e,constr,params) {
		var f = Reflect.field(e,constr);
		if(f == null) {
			throw new js__$Boot_HaxeError("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		var c = e.__constructs__[index];
		if(c == null) {
			throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static getInstanceFields(c) {
		var result = [];
		while(c != null) {
			var _g = 0;
			var _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static getClassFields(c) {
		var a = Object.getOwnPropertyNames(c);
		HxOverrides.remove(a,"__id__");
		HxOverrides.remove(a,"hx__closures__");
		HxOverrides.remove(a,"__name__");
		HxOverrides.remove(a,"__interfaces__");
		HxOverrides.remove(a,"__isInterface__");
		HxOverrides.remove(a,"__properties__");
		HxOverrides.remove(a,"__instanceFields__");
		HxOverrides.remove(a,"__super__");
		HxOverrides.remove(a,"__meta__");
		HxOverrides.remove(a,"prototype");
		HxOverrides.remove(a,"name");
		HxOverrides.remove(a,"length");
		return a;
	}
	static getEnumConstructs(e) {
		return e.__constructs__.slice();
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			var e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			var c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			var e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			var enm = $hxEnums[e];
			var ctorName = enm.__constructs__[a._hx_index];
			var params = enm[ctorName].__params__;
			var _g = 0;
			while(_g < params.length) {
				var f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return false;
		}
		return true;
	}
	static enumConstructor(e) {
		return $hxEnums[e.__enum__].__constructs__[e._hx_index];
	}
	static enumParameters(e) {
		var enm = $hxEnums[e.__enum__];
		var ctorName = enm.__constructs__[e._hx_index];
		var params = enm[ctorName].__params__;
		if(params != null) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
	static enumIndex(e) {
		return e._hx_index;
	}
	static allEnums(e) {
		return e.__empty_constructs__.slice();
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class _$UInt_UInt_$Impl_$ {
	static add(a,b) {
		return a + b;
	}
	static div(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) / _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static mul(a,b) {
		return a * b;
	}
	static sub(a,b) {
		return a - b;
	}
	static gt(a,b) {
		var aNeg = a < 0;
		var bNeg = b < 0;
		if(aNeg != bNeg) {
			return aNeg;
		} else {
			return a > b;
		}
	}
	static gte(a,b) {
		var aNeg = a < 0;
		var bNeg = b < 0;
		if(aNeg != bNeg) {
			return aNeg;
		} else {
			return a >= b;
		}
	}
	static lt(a,b) {
		return _$UInt_UInt_$Impl_$.gt(b,a);
	}
	static lte(a,b) {
		return _$UInt_UInt_$Impl_$.gte(b,a);
	}
	static and(a,b) {
		return a & b;
	}
	static or(a,b) {
		return a | b;
	}
	static xor(a,b) {
		return a ^ b;
	}
	static shl(a,b) {
		return a << b;
	}
	static shr(a,b) {
		return a >>> b;
	}
	static ushr(a,b) {
		return a >>> b;
	}
	static mod(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) % _$UInt_UInt_$Impl_$.toFloat(b) | 0;
	}
	static addWithFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) + b;
	}
	static mulWithFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) * b;
	}
	static divFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) / b;
	}
	static floatDiv(a,b) {
		return a / _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static subFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) - b;
	}
	static floatSub(a,b) {
		return a - _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static gtFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) > b;
	}
	static equalsInt(a,b) {
		return a == b;
	}
	static notEqualsInt(a,b) {
		return a != b;
	}
	static equalsFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) == b;
	}
	static notEqualsFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) != b;
	}
	static gteFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) >= b;
	}
	static floatGt(a,b) {
		return a > _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static floatGte(a,b) {
		return a >= _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static ltFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) < b;
	}
	static lteFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) <= b;
	}
	static floatLt(a,b) {
		return a < _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static floatLte(a,b) {
		return a <= _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static modFloat(a,b) {
		return _$UInt_UInt_$Impl_$.toFloat(a) % b;
	}
	static floatMod(a,b) {
		return a % _$UInt_UInt_$Impl_$.toFloat(b);
	}
	static negBits(this1) {
		return ~this1;
	}
	static prefixIncrement(this1) {
		return ++this1;
	}
	static postfixIncrement(this1) {
		return this1++;
	}
	static prefixDecrement(this1) {
		return --this1;
	}
	static postfixDecrement(this1) {
		return this1--;
	}
	static toString(this1,radix) {
		return Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1));
	}
	static toInt(this1) {
		return this1;
	}
	static toFloat(this1) {
		var int = this1;
		if(int < 0) {
			return 4294967296.0 + int;
		} else {
			return int + 0.0;
		}
	}
}
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
class haxe_ds__$Map_Map_$Impl_$ {
	static set(this1,key,value) {
		this1.set(key,value);
	}
	static get(this1,key) {
		return this1.get(key);
	}
	static exists(this1,key) {
		return this1.exists(key);
	}
	static remove(this1,key) {
		return this1.remove(key);
	}
	static keys(this1) {
		return this1.keys();
	}
	static iterator(this1) {
		return this1.iterator();
	}
	static keyValueIterator(this1) {
		return this1.keyValueIterator();
	}
	static copy(this1) {
		return this1.copy();
	}
	static toString(this1) {
		return this1.toString();
	}
	static clear(this1) {
		this1.clear();
	}
	static arrayWrite(this1,k,v) {
		this1.set(k,v);
		return v;
	}
	static toStringMap(t) {
		return new haxe_ds_StringMap();
	}
	static toIntMap(t) {
		return new haxe_ds_IntMap();
	}
	static toEnumValueMapMap(t) {
		return new haxe_ds_EnumValueMap();
	}
	static toObjectMap(t) {
		return new haxe_ds_ObjectMap();
	}
	static fromStringMap(map) {
		return map;
	}
	static fromIntMap(map) {
		return map;
	}
	static fromObjectMap(map) {
		return map;
	}
}
$hxClasses["haxe.ds._Map.Map_Impl_"] = haxe_ds__$Map_Map_$Impl_$;
haxe_ds__$Map_Map_$Impl_$.__name__ = "haxe.ds._Map.Map_Impl_";
class dropecho_langgen_Consts {
	static getRandomConsonantSet(random) {
		var _g = [];
		var x = dropecho_langgen_Consts.consonant_sets.keys();
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
		var keys = _g;
		var this1 = dropecho_langgen_Consts.consonant_sets;
		var key = random.choice(keys);
		var _this = this1;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	static getRandomVowelSet(random) {
		var _g = [];
		var x = dropecho_langgen_Consts.vowel_sets.keys();
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
		var keys = _g;
		var this1 = dropecho_langgen_Consts.vowel_sets;
		var key = random.choice(keys);
		var _this = this1;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	static getRandomSyllableStructure(random) {
		return random.choice(dropecho_langgen_Consts.syllable_structures);
	}
	static getRandomPhraseStructure(random) {
		return random.choice(dropecho_langgen_Consts.phrase_structures);
	}
}
$hxClasses["dropecho.langgen.Consts"] = $hx_exports["Consts"] = dropecho_langgen_Consts;
dropecho_langgen_Consts.__name__ = "dropecho.langgen.Consts";
class dropecho_langgen_Language {
	constructor(config) {
		this.trans_words = new haxe_ds_StringMap();
		this.words = new haxe_ds_StringMap();
		this.random = new seedyrng_Random();
		this.config = config != null ? config : { consonants : dropecho_langgen_Consts.getRandomConsonantSet(this.random), vowels : dropecho_langgen_Consts.getRandomVowelSet(this.random), syllable_structure : dropecho_langgen_Consts.getRandomSyllableStructure(this.random), phrase_structure : dropecho_langgen_Consts.getRandomPhraseStructure(this.random)};
		this.spell = new dropecho_langgen_Spell();
		this.genitive = this.createWord("of",1,1);
		this.definite = this.createWord("the",1,1);
	}
	createSyllable() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.config.syllable_structure.split("");
		while(_g1 < _g2.length) {
			var x = _g2[_g1];
			++_g1;
			if(x.split("")[0] == "?") {
				if(this.random.random() > 0.5) {
					continue;
				}
			}
			var tmp;
			switch(x) {
			case "?C":case "C":
				tmp = this.random.choice(this.config.consonants);
				break;
			case "?V":case "V":
				tmp = this.random.choice(this.config.vowels);
				break;
			default:
				tmp = "";
			}
			_g.push(tmp);
		}
		return _g.join("");
	}
	createWord(key,min,max) {
		if(max == null) {
			max = 4;
		}
		if(min == null) {
			min = 2;
		}
		var tmp;
		if(key != null) {
			var _this = this.words;
			tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.words;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.random.randomInt(min,max);
		while(_g1 < _g2) {
			var _ = _g1++;
			_g.push(this.createSyllable());
		}
		var word = _g.join("");
		word = this.spell.spell(word);
		var tmp1;
		if(key != null) {
			var _this2 = this.words;
			tmp1 = !(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key));
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this3 = this.words;
			if(__map_reserved[key] != null) {
				_this3.setReserved(key,word);
			} else {
				_this3.h[key] = word;
			}
			var _this4 = this.trans_words;
			if(__map_reserved[word] != null) {
				_this4.setReserved(word,key);
			} else {
				_this4.h[word] = key;
			}
		}
		return word;
	}
	createPhrase(key) {
		var subject = null;
		var tmp;
		if(key != null) {
			var _this = this.words;
			tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.words;
			subject = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.config.phrase_structure.split("");
		while(_g1 < _g2.length) {
			var x = _g2[_g1];
			++_g1;
			if(x.split("")[0] == "?" && this.random.random() > 0.5) {
				continue;
			}
			var phrase;
			switch(x) {
			case "?D":case "D":
				phrase = this.definite;
				break;
			case "?G":case "G":
				phrase = this.genitive;
				break;
			case "?N":case "N":
				phrase = this.createWord();
				break;
			case "S":
				phrase = subject != null ? subject : this.createWord(key);
				break;
			default:
				phrase = "";
			}
			_g.push(phrase);
		}
		var phrase1 = _g.join(" ");
		return this.spell.spell(phrase1);
	}
	translate(text) {
		var tokens = text.split(" ");
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		while(_g1 < tokens.length) {
			var x = tokens[_g1];
			++_g1;
			var word;
			var _this = this.trans_words;
			if(__map_reserved[x] != null ? _this.existsReserved(x) : _this.h.hasOwnProperty(x)) {
				var _this1 = this.trans_words;
				word = __map_reserved[x] != null ? _this1.getReserved(x) : _this1.h[x];
			} else {
				word = "UNKNOWN";
			}
			if(__map_reserved[x] != null) {
				_g.setReserved(x,word);
			} else {
				_g.h[x] = word;
			}
		}
		return _g;
	}
}
$hxClasses["dropecho.langgen.Language"] = $hx_exports["Language"] = dropecho_langgen_Language;
dropecho_langgen_Language.__name__ = "dropecho.langgen.Language";
Object.assign(dropecho_langgen_Language.prototype, {
	__class__: dropecho_langgen_Language
	,random: null
	,spell: null
	,config: null
	,words: null
	,trans_words: null
	,genitive: null
	,definite: null
});
class dropecho_langgen_Rewrite {
	constructor(config) {
		this.rules = new haxe_ds_ObjectMap();
		this.config = config;
	}
	parseRule(char,rule) {
		var consts = this.config.consonants.join("");
		var vowels = this.config.vowels.join("");
		var _this_r = new RegExp("C","g".split("u").join(""));
		rule = rule.replace(_this_r,"[" + consts + "]{1}");
		var _this_r1 = new RegExp("V","g".split("u").join(""));
		rule = rule.replace(_this_r1,"[" + vowels + "]{1}");
		var _this_r2 = new RegExp("_","g".split("u").join(""));
		rule = rule.replace(_this_r2,"([" + char + "]{1})");
		return rule;
	}
	addRule(char,rule,replaceWith) {
		var reg = new EReg(this.parseRule(char,rule),"");
		this.rules.set(reg,replaceWith);
	}
	rewrite(s) {
		var after = s;
		var _g = new haxe_iterators_MapKeyValueIterator(this.rules);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var rule = _g1.key;
			var replaceWith = _g1.value;
			after = after.replace(rule.r,replaceWith);
		}
		return after;
	}
}
$hxClasses["dropecho.langgen.Rewrite"] = dropecho_langgen_Rewrite;
dropecho_langgen_Rewrite.__name__ = "dropecho.langgen.Rewrite";
Object.assign(dropecho_langgen_Rewrite.prototype, {
	__class__: dropecho_langgen_Rewrite
	,rules: null
	,config: null
});
class dropecho_langgen_Spell {
	constructor(ortho) {
		if(ortho == null) {
			var _this = dropecho_langgen_Consts.corthsets;
			var tmp = __map_reserved["Default"] != null ? _this.getReserved("Default") : _this.h["Default"];
			var _this1 = dropecho_langgen_Consts.vorthsets;
			this.ortho = { consonants : tmp, vowels : __map_reserved["Default"] != null ? _this1.getReserved("Default") : _this1.h["Default"]};
		} else {
			this.ortho = ortho;
		}
	}
	getOrthoChar(char) {
		var tmp;
		if(this.ortho.consonants != null) {
			var _this = this.ortho.consonants;
			tmp = __map_reserved[char] != null ? _this.existsReserved(char) : _this.h.hasOwnProperty(char);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.ortho.consonants;
			if(__map_reserved[char] != null) {
				return _this1.getReserved(char);
			} else {
				return _this1.h[char];
			}
		}
		var tmp1;
		if(this.ortho.vowels != null) {
			var _this2 = this.ortho.vowels;
			tmp1 = __map_reserved[char] != null ? _this2.existsReserved(char) : _this2.h.hasOwnProperty(char);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this3 = this.ortho.vowels;
			if(__map_reserved[char] != null) {
				return _this3.getReserved(char);
			} else {
				return _this3.h[char];
			}
		}
		var _this4 = dropecho_langgen_Consts.default_ortho;
		if(__map_reserved[char] != null ? _this4.existsReserved(char) : _this4.h.hasOwnProperty(char)) {
			var _this5 = dropecho_langgen_Consts.default_ortho;
			if(__map_reserved[char] != null) {
				return _this5.getReserved(char);
			} else {
				return _this5.h[char];
			}
		}
		return char;
	}
	spell(s) {
		var _g = [];
		var _g1 = 0;
		var _g2 = s.split("");
		while(_g1 < _g2.length) {
			var char = _g2[_g1];
			++_g1;
			_g.push(this.getOrthoChar(char));
		}
		return _g.join("");
	}
}
$hxClasses["dropecho.langgen.Spell"] = $hx_exports["Spell"] = dropecho_langgen_Spell;
dropecho_langgen_Spell.__name__ = "dropecho.langgen.Spell";
Object.assign(dropecho_langgen_Spell.prototype, {
	__class__: dropecho_langgen_Spell
	,ortho: null
});
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
});
class haxe__$DynamicAccess_DynamicAccess_$Impl_$ {
	static _new() {
		var this1 = { };
		return this1;
	}
	static get(this1,key) {
		return this1[key];
	}
	static set(this1,key,value) {
		return this1[key] = value;
	}
	static exists(this1,key) {
		return Object.prototype.hasOwnProperty.call(this1,key);
	}
	static remove(this1,key) {
		return Reflect.deleteField(this1,key);
	}
	static keys(this1) {
		return Reflect.fields(this1);
	}
	static copy(this1) {
		return Reflect.copy(this1);
	}
	static iterator(this1) {
		return new haxe_iterators_DynamicAccessIterator(this1);
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
	}
}
$hxClasses["haxe._DynamicAccess.DynamicAccess_Impl_"] = haxe__$DynamicAccess_DynamicAccess_$Impl_$;
haxe__$DynamicAccess_DynamicAccess_$Impl_$.__name__ = "haxe._DynamicAccess.DynamicAccess_Impl_";
class haxe__$Int32_Int32_$Impl_$ {
	static negate(this1) {
		return ~this1 + 1 | 0;
	}
	static preIncrement(this1) {
		this1 = ++this1 | 0;
		return this1;
	}
	static postIncrement(this1) {
		var ret = this1++;
		this1 |= 0;
		return ret;
	}
	static preDecrement(this1) {
		this1 = --this1 | 0;
		return this1;
	}
	static postDecrement(this1) {
		var ret = this1--;
		this1 |= 0;
		return ret;
	}
	static add(a,b) {
		return a + b | 0;
	}
	static addInt(a,b) {
		return a + b | 0;
	}
	static sub(a,b) {
		return a - b | 0;
	}
	static subInt(a,b) {
		return a - b | 0;
	}
	static intSub(a,b) {
		return a - b | 0;
	}
	static mul(a,b) {
		return haxe__$Int32_Int32_$Impl_$._mul(a,b);
	}
	static mulInt(a,b) {
		return haxe__$Int32_Int32_$Impl_$._mul(a,b);
	}
	static toFloat(this1) {
		return this1;
	}
	static ucompare(a,b) {
		if(a < 0) {
			if(b < 0) {
				return ~b - ~a | 0;
			} else {
				return 1;
			}
		}
		if(b < 0) {
			return -1;
		} else {
			return a - b | 0;
		}
	}
	static clamp(x) {
		return x | 0;
	}
}
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = "haxe._Int32.Int32_Impl_";
class haxe__$Int64_Int64_$Impl_$ {
	static _new(x) {
		var this1 = x;
		return this1;
	}
	static copy(this1) {
		var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		return this2;
	}
	static make(high,low) {
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static ofInt(x) {
		var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		return this1;
	}
	static toInt(x) {
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		return x.low;
	}
	static is(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static getHigh(x) {
		return x.high;
	}
	static getLow(x) {
		return x.low;
	}
	static isNeg(x) {
		return x.high < 0;
	}
	static isZero(x) {
		var b_high = 0;
		var b_low = 0;
		if(x.high == b_high) {
			return x.low == b_low;
		} else {
			return false;
		}
	}
	static compare(a,b) {
		var v = a.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		if(a.high < 0) {
			if(b.high < 0) {
				return v;
			} else {
				return -1;
			}
		} else if(b.high >= 0) {
			return v;
		} else {
			return 1;
		}
	}
	static ucompare(a,b) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(a.high,b.high);
		if(v != 0) {
			return v;
		} else {
			return haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
	}
	static toStr(x) {
		return haxe__$Int64_Int64_$Impl_$.toString(x);
	}
	static toString(this1) {
		var i = this1;
		var b_high = 0;
		var b_low = 0;
		if(i.high == b_high && i.low == b_low) {
			return "0";
		}
		var str = "";
		var neg = false;
		if(i.high < 0) {
			neg = true;
		}
		var this2 = new haxe__$Int64__$_$_$Int64(0,10);
		var ten = this2;
		while(true) {
			var b_high1 = 0;
			var b_low1 = 0;
			if(!(i.high != b_high1 || i.low != b_low1)) {
				break;
			}
			var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
			if(r.modulus.high < 0) {
				var x = r.modulus;
				var high = ~x.high;
				var low = ~x.low + 1 | 0;
				if(low == 0) {
					var ret = high++;
					high = high | 0;
				}
				var this_high = high;
				var this_low = low;
				str = this_low + str;
				var x1 = r.quotient;
				var high1 = ~x1.high;
				var low1 = ~x1.low + 1 | 0;
				if(low1 == 0) {
					var ret1 = high1++;
					high1 = high1 | 0;
				}
				var this3 = new haxe__$Int64__$_$_$Int64(high1,low1);
				i = this3;
			} else {
				str = r.modulus.low + str;
				i = r.quotient;
			}
		}
		if(neg) {
			str = "-" + str;
		}
		return str;
	}
	static parseString(sParam) {
		return haxe_Int64Helper.parseString(sParam);
	}
	static fromFloat(f) {
		return haxe_Int64Helper.fromFloat(f);
	}
	static divMod(dividend,divisor) {
		if(divisor.high == 0) {
			switch(divisor.low) {
			case 0:
				throw new js__$Boot_HaxeError("divide by zero");
			case 1:
				var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
				var this2 = new haxe__$Int64__$_$_$Int64(0,0);
				return { quotient : this1, modulus : this2};
			}
		}
		var divSign = dividend.high < 0 != divisor.high < 0;
		var modulus;
		if(dividend.high < 0) {
			var high = ~dividend.high;
			var low = ~dividend.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this3 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this3;
		} else {
			var this4 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			modulus = this4;
		}
		if(divisor.high < 0) {
			var high1 = ~divisor.high;
			var low1 = ~divisor.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this5 = new haxe__$Int64__$_$_$Int64(high1,low1);
			divisor = this5;
		} else {
			divisor = divisor;
		}
		var this6 = new haxe__$Int64__$_$_$Int64(0,0);
		var quotient = this6;
		var this7 = new haxe__$Int64__$_$_$Int64(0,1);
		var mask = this7;
		while(!(divisor.high < 0)) {
			var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
			var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
			var b = 1;
			b &= 63;
			if(b == 0) {
				var this8 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this8;
			} else if(b < 32) {
				var this9 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
				divisor = this9;
			} else {
				var this10 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
				divisor = this10;
			}
			var b1 = 1;
			b1 &= 63;
			if(b1 == 0) {
				var this11 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this11;
			} else if(b1 < 32) {
				var this12 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
				mask = this12;
			} else {
				var this13 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
				mask = this13;
			}
			if(cmp >= 0) {
				break;
			}
		}
		while(true) {
			var b_high = 0;
			var b_low = 0;
			if(!(mask.high != b_high || mask.low != b_low)) {
				break;
			}
			var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
			if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
				var this14 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
				quotient = this14;
				var high2 = modulus.high - divisor.high | 0;
				var low2 = modulus.low - divisor.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
					var ret2 = high2--;
					high2 = high2 | 0;
				}
				var this15 = new haxe__$Int64__$_$_$Int64(high2,low2);
				modulus = this15;
			}
			var b2 = 1;
			b2 &= 63;
			if(b2 == 0) {
				var this16 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this16;
			} else if(b2 < 32) {
				var this17 = new haxe__$Int64__$_$_$Int64(mask.high >>> b2,mask.high << 32 - b2 | mask.low >>> b2);
				mask = this17;
			} else {
				var this18 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b2 - 32);
				mask = this18;
			}
			var b3 = 1;
			b3 &= 63;
			if(b3 == 0) {
				var this19 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this19;
			} else if(b3 < 32) {
				var this20 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b3,divisor.high << 32 - b3 | divisor.low >>> b3);
				divisor = this20;
			} else {
				var this21 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b3 - 32);
				divisor = this21;
			}
		}
		if(divSign) {
			var high3 = ~quotient.high;
			var low3 = ~quotient.low + 1 | 0;
			if(low3 == 0) {
				var ret3 = high3++;
				high3 = high3 | 0;
			}
			var this22 = new haxe__$Int64__$_$_$Int64(high3,low3);
			quotient = this22;
		}
		if(dividend.high < 0) {
			var high4 = ~modulus.high;
			var low4 = ~modulus.low + 1 | 0;
			if(low4 == 0) {
				var ret4 = high4++;
				high4 = high4 | 0;
			}
			var this23 = new haxe__$Int64__$_$_$Int64(high4,low4);
			modulus = this23;
		}
		return { quotient : quotient, modulus : modulus};
	}
	static neg(x) {
		var high = ~x.high;
		var low = ~x.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static preIncrement(this1) {
		var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		var ret = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			var ret1 = this1.high++;
			this1.high = this1.high | 0;
		}
		return this1;
	}
	static postIncrement(this1) {
		var ret = this1;
		var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		var ret1 = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			var ret2 = this1.high++;
			this1.high = this1.high | 0;
		}
		return ret;
	}
	static preDecrement(this1) {
		var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			var ret = this1.high--;
			this1.high = this1.high | 0;
		}
		var ret1 = this1.low--;
		this1.low = this1.low | 0;
		return this1;
	}
	static postDecrement(this1) {
		var ret = this1;
		var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			var ret1 = this1.high--;
			this1.high = this1.high | 0;
		}
		var ret2 = this1.low--;
		this1.low = this1.low | 0;
		return ret;
	}
	static add(a,b) {
		var high = a.high + b.high | 0;
		var low = a.low + b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static addInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var high = a.high + b_high | 0;
		var low = a.low + b_low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static sub(a,b) {
		var high = a.high - b.high | 0;
		var low = a.low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
			var ret = high--;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static subInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var high = a.high - b_high | 0;
		var low = a.low - b_low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low) < 0) {
			var ret = high--;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static intSub(a,b) {
		var a_high = a >> 31;
		var a_low = a;
		var high = a_high - b.high | 0;
		var low = a_low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low) < 0) {
			var ret = high--;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mul(a,b) {
		var mask = 65535;
		var al = a.low & mask;
		var ah = a.low >>> 16;
		var bl = b.low & mask;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = low + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			var ret = high++;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			var ret1 = high++;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b.low) | 0) | 0;
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mulInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var mask = 65535;
		var al = a.low & mask;
		var ah = a.low >>> 16;
		var bl = b_low & mask;
		var bh = b_low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = low + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			var ret = high++;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			var ret1 = high++;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b_high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b_low) | 0) | 0;
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static div(a,b) {
		return haxe__$Int64_Int64_$Impl_$.divMod(a,b).quotient;
	}
	static divInt(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		return haxe__$Int64_Int64_$Impl_$.divMod(a,this1).quotient;
	}
	static intDiv(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).quotient;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		var x1 = x.low;
		var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static mod(a,b) {
		return haxe__$Int64_Int64_$Impl_$.divMod(a,b).modulus;
	}
	static modInt(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		var x = haxe__$Int64_Int64_$Impl_$.divMod(a,this1).modulus;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		var x1 = x.low;
		var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static intMod(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).modulus;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		var x1 = x.low;
		var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static eq(a,b) {
		if(a.high == b.high) {
			return a.low == b.low;
		} else {
			return false;
		}
	}
	static eqInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		if(a.high == b_high) {
			return a.low == b_low;
		} else {
			return false;
		}
	}
	static neq(a,b) {
		if(!(a.high != b.high)) {
			return a.low != b.low;
		} else {
			return true;
		}
	}
	static neqInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		if(!(a.high != b_high)) {
			return a.low != b_low;
		} else {
			return true;
		}
	}
	static lt(a,b) {
		var v = a.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static ltInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var v = a.high - b_high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	}
	static intLt(a,b) {
		var a_high = a >> 31;
		var a_low = a;
		var v = a_high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static lte(a,b) {
		var v = a.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static lteInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var v = a.high - b_high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
	}
	static intLte(a,b) {
		var a_high = a >> 31;
		var a_low = a;
		var v = a_high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static gt(a,b) {
		var v = a.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gtInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var v = a.high - b_high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
	}
	static intGt(a,b) {
		var a_high = a >> 31;
		var a_low = a;
		var v = a_high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gte(a,b) {
		var v = a.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static gteInt(a,b) {
		var b_high = b >> 31;
		var b_low = b;
		var v = a.high - b_high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
	}
	static intGte(a,b) {
		var a_high = a >> 31;
		var a_low = a;
		var v = a_high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static complement(a) {
		var this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
		return this1;
	}
	static and(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
		return this1;
	}
	static or(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
		return this1;
	}
	static xor(a,b) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
		return this1;
	}
	static shl(a,b) {
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
			return this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
			return this3;
		}
	}
	static shr(a,b) {
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
			return this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
			return this3;
		}
	}
	static ushr(a,b) {
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
			return this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
			return this3;
		}
	}
	static get_high(this1) {
		return this1.high;
	}
	static set_high(this1,x) {
		return this1.high = x;
	}
	static get_low(this1) {
		return this1.low;
	}
	static set_low(this1,x) {
		return this1.low = x;
	}
}
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = "haxe._Int64.Int64_Impl_";
haxe__$Int64_Int64_$Impl_$.__properties__ = {get_low: "get_low",get_high: "get_high"};
class haxe__$Int64__$_$_$Int64 {
	constructor(high,low) {
		this.high = high;
		this.low = low;
	}
	toString() {
		return haxe__$Int64_Int64_$Impl_$.toString(this);
	}
}
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
Object.assign(haxe__$Int64__$_$_$Int64.prototype, {
	__class__: haxe__$Int64__$_$_$Int64
	,high: null
	,low: null
});
class haxe_Int64Helper {
	static parseString(sParam) {
		var base_high = 0;
		var base_low = 10;
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		var current = this1;
		var this2 = new haxe__$Int64__$_$_$Int64(0,1);
		var multiplier = this2;
		var sIsNegative = false;
		var s = StringTools.trim(sParam);
		if(s.charAt(0) == "-") {
			sIsNegative = true;
			s = s.substring(1,s.length);
		}
		var len = s.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
			if(digitInt < 0 || digitInt > 9) {
				throw new js__$Boot_HaxeError("NumberFormatError");
			}
			if(digitInt != 0) {
				var digit_high = digitInt >> 31;
				var digit_low = digitInt;
				if(sIsNegative) {
					var mask = 65535;
					var al = multiplier.low & mask;
					var ah = multiplier.low >>> 16;
					var bl = digit_low & mask;
					var bh = digit_low >>> 16;
					var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
					var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
					var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
					var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
					var low = p00;
					var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 = p01 << 16;
					low = low + p01 | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
						var ret = high++;
						high = high | 0;
					}
					p10 = p10 << 16;
					low = low + p10 | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
						var ret1 = high++;
						high = high | 0;
					}
					high = high + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit_low) | 0) | 0;
					var b_high = high;
					var b_low = low;
					var high1 = current.high - b_high | 0;
					var low1 = current.low - b_low | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(current.low,b_low) < 0) {
						var ret2 = high1--;
						high1 = high1 | 0;
					}
					var this3 = new haxe__$Int64__$_$_$Int64(high1,low1);
					current = this3;
					if(!(current.high < 0)) {
						throw new js__$Boot_HaxeError("NumberFormatError: Underflow");
					}
				} else {
					var mask1 = 65535;
					var al1 = multiplier.low & mask1;
					var ah1 = multiplier.low >>> 16;
					var bl1 = digit_low & mask1;
					var bh1 = digit_low >>> 16;
					var p001 = haxe__$Int32_Int32_$Impl_$._mul(al1,bl1);
					var p101 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bl1);
					var p011 = haxe__$Int32_Int32_$Impl_$._mul(al1,bh1);
					var p111 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bh1);
					var low2 = p001;
					var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
					p011 = p011 << 16;
					low2 = low2 + p011 | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p011) < 0) {
						var ret3 = high2++;
						high2 = high2 | 0;
					}
					p101 = p101 << 16;
					low2 = low2 + p101 | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p101) < 0) {
						var ret4 = high2++;
						high2 = high2 | 0;
					}
					high2 = high2 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit_low) | 0) | 0;
					var b_high1 = high2;
					var b_low1 = low2;
					var high3 = current.high + b_high1 | 0;
					var low3 = current.low + b_low1 | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,current.low) < 0) {
						var ret5 = high3++;
						high3 = high3 | 0;
					}
					var this4 = new haxe__$Int64__$_$_$Int64(high3,low3);
					current = this4;
					if(current.high < 0) {
						throw new js__$Boot_HaxeError("NumberFormatError: Overflow");
					}
				}
			}
			var mask2 = 65535;
			var al2 = multiplier.low & mask2;
			var ah2 = multiplier.low >>> 16;
			var bl2 = base_low & mask2;
			var bh2 = base_low >>> 16;
			var p002 = haxe__$Int32_Int32_$Impl_$._mul(al2,bl2);
			var p102 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bl2);
			var p012 = haxe__$Int32_Int32_$Impl_$._mul(al2,bh2);
			var p112 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bh2);
			var low4 = p002;
			var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
			p012 = p012 << 16;
			low4 = low4 + p012 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p012) < 0) {
				var ret6 = high4++;
				high4 = high4 | 0;
			}
			p102 = p102 << 16;
			low4 = low4 + p102 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p102) < 0) {
				var ret7 = high4++;
				high4 = high4 | 0;
			}
			high4 = high4 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,base_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,base_low) | 0) | 0;
			var this5 = new haxe__$Int64__$_$_$Int64(high4,low4);
			multiplier = this5;
		}
		return current;
	}
	static fromFloat(f) {
		if(isNaN(f) || !isFinite(f)) {
			throw new js__$Boot_HaxeError("Number is NaN or Infinite");
		}
		var noFractions = f - f % 1;
		if(noFractions > 9007199254740991) {
			throw new js__$Boot_HaxeError("Conversion overflow");
		}
		if(noFractions < -9007199254740991) {
			throw new js__$Boot_HaxeError("Conversion underflow");
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		var result = this1;
		var neg = noFractions < 0;
		var rest = neg ? -noFractions : noFractions;
		var i = 0;
		while(rest >= 1) {
			var curr = rest % 2;
			rest /= 2;
			if(curr >= 1) {
				var a_high = 0;
				var a_low = 1;
				var b = i;
				b &= 63;
				var b1;
				if(b == 0) {
					var this2 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
					b1 = this2;
				} else if(b < 32) {
					var this3 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
					b1 = this3;
				} else {
					var this4 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
					b1 = this4;
				}
				var high = result.high + b1.high | 0;
				var low = result.low + b1.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
					var ret = high++;
					high = high | 0;
				}
				var this5 = new haxe__$Int64__$_$_$Int64(high,low);
				result = this5;
			}
			++i;
		}
		if(neg) {
			var high1 = ~result.high;
			var low1 = ~result.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this6 = new haxe__$Int64__$_$_$Int64(high1,low1);
			result = this6;
		}
		return result;
	}
}
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
class haxe_crypto_Sha1 {
	constructor() {
	}
	doEncode(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	rol(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	ft(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	kt(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	hex(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
	static encode(s) {
		var sh = new haxe_crypto_Sha1();
		var h = sh.doEncode(haxe_crypto_Sha1.str2blks(s));
		return sh.hex(h);
	}
	static make(b) {
		var h = new haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b));
		var out = new haxe_io_Bytes(new ArrayBuffer(20));
		var p = 0;
		out.b[p++] = h[0] >>> 24;
		out.b[p++] = h[0] >> 16 & 255;
		out.b[p++] = h[0] >> 8 & 255;
		out.b[p++] = h[0] & 255;
		out.b[p++] = h[1] >>> 24;
		out.b[p++] = h[1] >> 16 & 255;
		out.b[p++] = h[1] >> 8 & 255;
		out.b[p++] = h[1] & 255;
		out.b[p++] = h[2] >>> 24;
		out.b[p++] = h[2] >> 16 & 255;
		out.b[p++] = h[2] >> 8 & 255;
		out.b[p++] = h[2] & 255;
		out.b[p++] = h[3] >>> 24;
		out.b[p++] = h[3] >> 16 & 255;
		out.b[p++] = h[3] >> 8 & 255;
		out.b[p++] = h[3] & 255;
		out.b[p++] = h[4] >>> 24;
		out.b[p++] = h[4] >> 16 & 255;
		out.b[p++] = h[4] >> 8 & 255;
		out.b[p++] = h[4] & 255;
		return out;
	}
	static str2blks(s) {
		var s1 = haxe_io_Bytes.ofString(s);
		var nblk = (s1.length + 8 >> 6) + 1;
		var blks = [];
		var _g = 0;
		var _g1 = nblk * 16;
		while(_g < _g1) {
			var i = _g++;
			blks[i] = 0;
		}
		var _g2 = 0;
		var _g3 = s1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = i1 >> 2;
			blks[p] |= s1.b[i1] << 24 - ((i1 & 3) << 3);
		}
		var i2 = s1.length;
		var p1 = i2 >> 2;
		blks[p1] |= 128 << 24 - ((i2 & 3) << 3);
		blks[nblk * 16 - 1] = s1.length * 8;
		return blks;
	}
	static bytes2blks(b) {
		var nblk = (b.length + 8 >> 6) + 1;
		var blks = [];
		var _g = 0;
		var _g1 = nblk * 16;
		while(_g < _g1) {
			var i = _g++;
			blks[i] = 0;
		}
		var _g2 = 0;
		var _g3 = b.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = i1 >> 2;
			blks[p] |= b.b[i1] << 24 - ((i1 & 3) << 3);
		}
		var i2 = b.length;
		var p1 = i2 >> 2;
		blks[p1] |= 128 << 24 - ((i2 & 3) << 3);
		blks[nblk * 16 - 1] = b.length * 8;
		return blks;
	}
}
$hxClasses["haxe.crypto.Sha1"] = haxe_crypto_Sha1;
haxe_crypto_Sha1.__name__ = "haxe.crypto.Sha1";
Object.assign(haxe_crypto_Sha1.prototype, {
	__class__: haxe_crypto_Sha1
});
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	remove(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	exists(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	iterator() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	keys() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	copy() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	removeLoop(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	iteratorLoop(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	keysLoop(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	merge(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	minBinding(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	removeMinBinding(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	balance(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	toString() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	clear() {
		this.root = null;
	}
}
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
	,root: null
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			var tmp;
			var _this = this.left;
			var _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				var _this2 = this.left;
				tmp = _this2 == null ? 0 : _this2._height;
			} else {
				var _this3 = this.right;
				tmp = _this3 == null ? 0 : _this3._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
	toString() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
}
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
	,left: null
	,right: null
	,key: null
	,value: null
	,_height: null
});
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	copy() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
}
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds__$HashMap_HashMap_$Impl_$ {
	static _new() {
		var this1 = new haxe_ds__$HashMap_HashMapData();
		return this1;
	}
	static set(this1,k,v) {
		var _this = this1.keys;
		var key = k.hashCode();
		_this.h[key] = k;
		var _this1 = this1.values;
		var key1 = k.hashCode();
		_this1.h[key1] = v;
	}
	static get(this1,k) {
		var _this = this1.values;
		var key = k.hashCode();
		return _this.h[key];
	}
	static exists(this1,k) {
		var _this = this1.values;
		var key = k.hashCode();
		return _this.h.hasOwnProperty(key);
	}
	static remove(this1,k) {
		this1.values.remove(k.hashCode());
		return this1.keys.remove(k.hashCode());
	}
	static keys(this1) {
		return this1.keys.iterator();
	}
	static copy(this1) {
		var copied = new haxe_ds__$HashMap_HashMapData();
		copied.keys = this1.keys.copy();
		copied.values = this1.values.copy();
		return copied;
	}
	static iterator(this1) {
		return this1.values.iterator();
	}
	static clear(this1) {
		this1.keys.h = { };
		this1.values.h = { };
	}
}
$hxClasses["haxe.ds._HashMap.HashMap_Impl_"] = haxe_ds__$HashMap_HashMap_$Impl_$;
haxe_ds__$HashMap_HashMap_$Impl_$.__name__ = "haxe.ds._HashMap.HashMap_Impl_";
class haxe_ds__$HashMap_HashMapData {
	constructor() {
		this.keys = new haxe_ds_IntMap();
		this.values = new haxe_ds_IntMap();
	}
}
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
Object.assign(haxe_ds__$HashMap_HashMapData.prototype, {
	__class__: haxe_ds__$HashMap_HashMapData
	,keys: null
	,values: null
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	toString() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { };
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	remove(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	toString() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { __keys__ : { }};
	}
	static assignId(obj) {
		return (obj.__id__ = $global.$haxeUID++);
	}
	static getId(obj) {
		return obj.__id__;
	}
}
haxe_ds_ObjectMap.count = null;
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
class haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$ {
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,i) {
		return this1[i];
	}
}
$hxClasses["haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_"] = haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$;
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.__name__ = "haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_";
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.__properties__ = {get_length: "get_length"};
class haxe_ds__$StringMap_StringMapIterator {
	constructor(map,keys) {
		this.map = map;
		this.keys = keys;
		this.index = 0;
		this.count = keys.length;
	}
	hasNext() {
		return this.index < this.count;
	}
	next() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
}
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
Object.assign(haxe_ds__$StringMap_StringMapIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapIterator
	,map: null
	,keys: null
	,index: null
	,count: null
});
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	isReserved(key) {
		return __map_reserved[key] != null;
	}
	set(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	get(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	exists(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	remove(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		var copied = new haxe_ds_StringMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = __map_reserved[key1] != null ? this.getReserved(key1) : this.h[key1];
			if(__map_reserved[key1] != null) {
				copied.setReserved(key1,value);
			} else {
				copied.h[key1] = value;
			}
		}
		return copied;
	}
	toString() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { };
		this.rh = null;
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
	,rh: null
});
class haxe_ds_WeakMap {
	constructor() {
		throw new js__$Boot_HaxeError("Not implemented for this platform");
	}
	set(key,value) {
	}
	get(key) {
		return null;
	}
	exists(key) {
		return false;
	}
	remove(key) {
		return false;
	}
	keys() {
		return null;
	}
	iterator() {
		return null;
	}
	keyValueIterator() {
		return null;
	}
	copy() {
		return null;
	}
	toString() {
		return null;
	}
	clear() {
	}
}
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_WeakMap.prototype, {
	__class__: haxe_ds_WeakMap
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	get(pos) {
		return this.b[pos];
	}
	set(pos,v) {
		this.b[pos] = v;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	fill(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	compare(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	initData() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	getDouble(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	setDouble(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	setFloat(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	setUInt16(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getInt64(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	setInt64(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	readString(pos,len) {
		return this.getString(pos,len);
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	getData() {
		return this.b.bufferValue;
	}
	static alloc(length) {
		return new haxe_io_Bytes(new ArrayBuffer(length));
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		var hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
	static ofHex(s) {
		if((s.length & 1) != 0) {
			throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
		}
		var a = [];
		var i = 0;
		var len = s.length >> 1;
		while(i < len) {
			var high = s.charCodeAt(i * 2);
			var low = s.charCodeAt(i * 2 + 1);
			high = (high & 15) + ((high & 64) >> 6) * 9;
			low = (low & 15) + ((low & 64) >> 6) * 9;
			a.push((high << 4 | low) & 255);
			++i;
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static fastGet(b,pos) {
		return b.bytes[pos];
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
	,data: null
});
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	get_length() {
		return this.pos;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	add(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	addString(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	addInt32(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	addInt64(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	addFloat(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	addDouble(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
Object.assign(haxe_io_BytesBuffer.prototype, {
	__class__: haxe_io_BytesBuffer
	,buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,__properties__: {get_length: "get_length"}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
class haxe_iterators_DynamicAccessIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		return this.access[this.keys[this.index++]];
	}
}
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
Object.assign(haxe_iterators_DynamicAccessIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_DynamicAccessKeyValueIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
}
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
Object.assign(haxe_iterators_DynamicAccessKeyValueIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessKeyValueIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_StringIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return this.s.charCodeAt(this.offset++);
	}
}
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
Object.assign(haxe_iterators_StringIterator.prototype, {
	__class__: haxe_iterators_StringIterator
	,offset: null
	,s: null
});
class haxe_iterators_StringIteratorUnicode {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	static unicodeIterator(s) {
		return new haxe_iterators_StringIteratorUnicode(s);
	}
}
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
Object.assign(haxe_iterators_StringIteratorUnicode.prototype, {
	__class__: haxe_iterators_StringIteratorUnicode
	,offset: null
	,s: null
});
class haxe_iterators_StringKeyValueIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
}
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
Object.assign(haxe_iterators_StringKeyValueIterator.prototype, {
	__class__: haxe_iterators_StringKeyValueIterator
	,offset: null
	,s: null
});
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
	static wrap(val) {
		if(((val) instanceof Error)) {
			return val;
		} else {
			return new js__$Boot_HaxeError(val);
		}
	}
}
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
	,val: null
});
class js_Boot {
	static isClass(o) {
		return o.__name__;
	}
	static isInterface(o) {
		return o.__isInterface__;
	}
	static isEnum(e) {
		return e.__ename__;
	}
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						var _g = [];
						{
							var _g1 = 0;
							var _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								var p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__toStr = null;
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class js_Lib {
	static debug() {
		debugger;
	}
	static alert(v) {
		alert(js_Boot.__string_rec(v,""));
	}
	static eval(code) {
		return eval(code);
	}
	static get_undefined() {
		return undefined;
	}
	static rethrow() {
	}
	static getOriginalException() {
		return null;
	}
	static getNextHaxeUID() {
		return $global.$haxeUID++;
	}
}
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined: "get_undefined"};
class js_lib__$Object_ObjectEntry_$Impl_$ {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
$hxClasses["js.lib._Object.ObjectEntry_Impl_"] = js_lib__$Object_ObjectEntry_$Impl_$;
js_lib__$Object_ObjectEntry_$Impl_$.__name__ = "js.lib._Object.ObjectEntry_Impl_";
js_lib__$Object_ObjectEntry_$Impl_$.__properties__ = {get_value: "get_value",get_key: "get_key"};
class seedyrng_GeneratorInterface {
}
$hxClasses["seedyrng.GeneratorInterface"] = seedyrng_GeneratorInterface;
seedyrng_GeneratorInterface.__name__ = "seedyrng.GeneratorInterface";
seedyrng_GeneratorInterface.__isInterface__ = true;
Object.assign(seedyrng_GeneratorInterface.prototype, {
	__class__: seedyrng_GeneratorInterface
	,get_seed: null
	,set_seed: null
	,get_state: null
	,set_state: null
	,get_usesAllBits: null
	,nextInt: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
class seedyrng_Random {
	constructor(seed,generator) {
		if(seed == null) {
			var this1 = new haxe__$Int64__$_$_$Int64(seedyrng_Random.randomSystemInt(),seedyrng_Random.randomSystemInt());
			seed = this1;
		}
		if(generator == null) {
			generator = new seedyrng_Xorshift128Plus();
		}
		this.generator = generator;
		this.set_seed(seed);
	}
	get_seed() {
		return this.generator.get_seed();
	}
	set_seed(value) {
		return this.generator.set_seed(value);
	}
	get_state() {
		return this.generator.get_state();
	}
	set_state(value) {
		return this.generator.set_state(value);
	}
	get_usesAllBits() {
		return this.generator.get_usesAllBits();
	}
	nextInt() {
		return this.generator.nextInt();
	}
	nextFullInt() {
		if(this.generator.get_usesAllBits()) {
			return this.generator.nextInt();
		} else {
			var num1 = this.generator.nextInt();
			var num2 = this.generator.nextInt();
			num2 = num2 >>> 16 | num2 << 16;
			return num1 ^ num2;
		}
	}
	setStringSeed(seed) {
		this.setBytesSeed(haxe_io_Bytes.ofString(seed));
	}
	setBytesSeed(seed) {
		var hash = haxe_crypto_Sha1.make(seed);
		this.set_seed(hash.getInt64(0));
	}
	random() {
		var upper = this.nextFullInt() & 2097151;
		var lower = this.nextFullInt();
		var b = upper * Math.pow(2,32);
		var floatNum = _$UInt_UInt_$Impl_$.toFloat(lower) + b;
		var result = floatNum * Math.pow(2,-53);
		return result;
	}
	randomInt(lower,upper) {
		return Math.floor(this.random() * (upper - lower + 1)) + lower;
	}
	uniform(lower,upper) {
		return this.random() * (upper - lower) + lower;
	}
	choice(array) {
		return array[this.randomInt(0,array.length - 1)];
	}
	shuffle(array) {
		var _g = 0;
		var _g1 = array.length - 1;
		while(_g < _g1) {
			var index = _g++;
			var randIndex = this.randomInt(index,array.length - 1);
			var tempA = array[index];
			var tempB = array[randIndex];
			array[index] = tempB;
			array[randIndex] = tempA;
		}
	}
	static randomSystemInt() {
		var value = Std.random(255) << 24 | Std.random(255) << 16 | Std.random(255) << 8 | Std.random(255);
		return value;
	}
}
$hxClasses["seedyrng.Random"] = seedyrng_Random;
seedyrng_Random.__name__ = "seedyrng.Random";
seedyrng_Random.__interfaces__ = [seedyrng_GeneratorInterface];
Object.assign(seedyrng_Random.prototype, {
	__class__: seedyrng_Random
	,generator: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
class seedyrng_Xorshift128Plus {
	constructor() {
		this._currentAvailable = false;
		var this1 = new haxe__$Int64__$_$_$Int64(0,1);
		this.set_seed(this1);
	}
	get_usesAllBits() {
		return false;
	}
	get_seed() {
		return this._seed;
	}
	set_seed(value) {
		var b_high = 0;
		var b_low = 0;
		if(value.high != b_high || value.low != b_low) {
			value = value;
		} else {
			var this1 = new haxe__$Int64__$_$_$Int64(0,1);
			value = this1;
		}
		this._seed = value;
		this._state0 = value;
		this._state1 = seedyrng_Xorshift128Plus.SEED_1;
		this._currentAvailable = false;
		return value;
	}
	get_state() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(33));
		bytes.setInt64(0,this._seed);
		bytes.setInt64(8,this._state0);
		bytes.setInt64(16,this._state1);
		bytes.b[24] = this._currentAvailable ? 1 : 0;
		if(this._currentAvailable) {
			bytes.setInt64(25,this._current);
		}
		return bytes;
	}
	set_state(value) {
		if(value.length != 33) {
			throw new js__$Boot_HaxeError("Wrong state size " + value.length);
		}
		this._seed = value.getInt64(0);
		this._state0 = value.getInt64(8);
		this._state1 = value.getInt64(16);
		this._currentAvailable = value.b[24] == 1;
		if(this._currentAvailable) {
			this._current = value.getInt64(25);
		}
		return value;
	}
	stepNext() {
		var x = this._state0;
		var y = this._state1;
		this._state0 = y;
		var b = 23;
		b &= 63;
		var b1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high,x.low);
			b1 = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(x.high << b | x.low >>> 32 - b,x.low << b);
			b1 = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(x.low << b - 32,0);
			b1 = this3;
		}
		var this4 = new haxe__$Int64__$_$_$Int64(x.high ^ b1.high,x.low ^ b1.low);
		x = this4;
		var a_high = x.high ^ y.high;
		var a_low = x.low ^ y.low;
		var b2 = 17;
		b2 &= 63;
		var b3;
		if(b2 == 0) {
			var this5 = new haxe__$Int64__$_$_$Int64(x.high,x.low);
			b3 = this5;
		} else if(b2 < 32) {
			var this6 = new haxe__$Int64__$_$_$Int64(x.high >> b2,x.high << 32 - b2 | x.low >>> b2);
			b3 = this6;
		} else {
			var this7 = new haxe__$Int64__$_$_$Int64(x.high >> 31,x.high >> b2 - 32);
			b3 = this7;
		}
		var a_high1 = a_high ^ b3.high;
		var a_low1 = a_low ^ b3.low;
		var b4 = 26;
		b4 &= 63;
		var b5;
		if(b4 == 0) {
			var this8 = new haxe__$Int64__$_$_$Int64(y.high,y.low);
			b5 = this8;
		} else if(b4 < 32) {
			var this9 = new haxe__$Int64__$_$_$Int64(y.high >> b4,y.high << 32 - b4 | y.low >>> b4);
			b5 = this9;
		} else {
			var this10 = new haxe__$Int64__$_$_$Int64(y.high >> 31,y.high >> b4 - 32);
			b5 = this10;
		}
		var this11 = new haxe__$Int64__$_$_$Int64(a_high1 ^ b5.high,a_low1 ^ b5.low);
		this._state1 = this11;
		var a = this._state1;
		var high = a.high + y.high | 0;
		var low = a.low + y.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this12 = new haxe__$Int64__$_$_$Int64(high,low);
		this._current = this12;
	}
	nextInt() {
		if(this._currentAvailable) {
			this._currentAvailable = false;
			return this._current.low;
		} else {
			this.stepNext();
			this._currentAvailable = true;
			return this._current.high;
		}
	}
}
$hxClasses["seedyrng.Xorshift128Plus"] = seedyrng_Xorshift128Plus;
seedyrng_Xorshift128Plus.__name__ = "seedyrng.Xorshift128Plus";
seedyrng_Xorshift128Plus.__interfaces__ = [seedyrng_GeneratorInterface];
Object.assign(seedyrng_Xorshift128Plus.prototype, {
	__class__: seedyrng_Xorshift128Plus
	,_seed: null
	,_state0: null
	,_state1: null
	,_current: null
	,_currentAvailable: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
dropecho_langgen_Consts.consonant_sets = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = "bcd".split("");
		if(__map_reserved["Test"] != null) {
			_g.setReserved("Test",value);
		} else {
			_g.h["Test"] = value;
		}
	}
	{
		var value1 = "ptkmnls".split("");
		if(__map_reserved["Minimal"] != null) {
			_g.setReserved("Minimal",value1);
		} else {
			_g.h["Minimal"] = value1;
		}
	}
	{
		var value2 = "ptkbdgmnlrsʃzʒʧ".split("");
		if(__map_reserved["English-ish"] != null) {
			_g.setReserved("English-ish",value2);
		} else {
			_g.h["English-ish"] = value2;
		}
	}
	{
		var value3 = "ptkmnh".split("");
		if(__map_reserved["Pirahã (very simple)"] != null) {
			_g.setReserved("Pirahã (very simple)",value3);
		} else {
			_g.h["Pirahã (very simple)"] = value3;
		}
	}
	{
		var value4 = "hklmnpwʔ".split("");
		if(__map_reserved["Hawaiian-ish"] != null) {
			_g.setReserved("Hawaiian-ish",value4);
		} else {
			_g.h["Hawaiian-ish"] = value4;
		}
	}
	{
		var value5 = "ptkqvsgrmnŋlj".split("");
		if(__map_reserved["Greenlandic-ish"] != null) {
			_g.setReserved("Greenlandic-ish",value5);
		} else {
			_g.h["Greenlandic-ish"] = value5;
		}
	}
	{
		var value6 = "tksʃdbqɣxmnlrwj".split("");
		if(__map_reserved["Arabic-ish"] != null) {
			_g.setReserved("Arabic-ish",value6);
		} else {
			_g.h["Arabic-ish"] = value6;
		}
	}
	{
		var value7 = "tkdgmnsʃ".split("");
		if(__map_reserved["Arabic-lite"] != null) {
			_g.setReserved("Arabic-lite",value7);
		} else {
			_g.h["Arabic-lite"] = value7;
		}
	}
	{
		var value8 = "ptkbdgmnszʒʧhjw".split("");
		if(__map_reserved["English-lite"] != null) {
			_g.setReserved("English-lite",value8);
		} else {
			_g.h["English-lite"] = value8;
		}
	}
	$r = _g;
	return $r;
}(this));
dropecho_langgen_Consts.vowel_sets = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = "aeiou".split("");
		if(__map_reserved["Test"] != null) {
			_g.setReserved("Test",value);
		} else {
			_g.h["Test"] = value;
		}
	}
	{
		var value1 = "aeiou".split("");
		if(__map_reserved["Standard 5-vowel"] != null) {
			_g.setReserved("Standard 5-vowel",value1);
		} else {
			_g.h["Standard 5-vowel"] = value1;
		}
	}
	{
		var value2 = "aiu".split("");
		if(__map_reserved["3-vowel a i u"] != null) {
			_g.setReserved("3-vowel a i u",value2);
		} else {
			_g.h["3-vowel a i u"] = value2;
		}
	}
	{
		var value3 = "aeiouAEI".split("");
		if(__map_reserved["Extra A E I"] != null) {
			_g.setReserved("Extra A E I",value3);
		} else {
			_g.h["Extra A E I"] = value3;
		}
	}
	{
		var value4 = "aeiouU".split("");
		if(__map_reserved["Extra U"] != null) {
			_g.setReserved("Extra U",value4);
		} else {
			_g.h["Extra U"] = value4;
		}
	}
	{
		var value5 = "aiuAI".split("");
		if(__map_reserved["5-vowel a i u A I"] != null) {
			_g.setReserved("5-vowel a i u A I",value5);
		} else {
			_g.h["5-vowel a i u A I"] = value5;
		}
	}
	{
		var value6 = "eou".split("");
		if(__map_reserved["3-vowel e o u"] != null) {
			_g.setReserved("3-vowel e o u",value6);
		} else {
			_g.h["3-vowel e o u"] = value6;
		}
	}
	{
		var value7 = "aeiouAOU".split("");
		if(__map_reserved["Extra A O U"] != null) {
			_g.setReserved("Extra A O U",value7);
		} else {
			_g.h["Extra A O U"] = value7;
		}
	}
	$r = _g;
	return $r;
}(this));
dropecho_langgen_Consts.syllable_structures = ["CVC","CVV?C","CVVC?","CVC?","CV","VC","CVF","C?VC","CVF?","CL?VC","CL?VF","S?CVC","S?CVF","S?CVC?","C?VF","C?VC?","C?VF?","C?L?VC","VC","CVL?C?","C?VL?C","C?VLC?"];
dropecho_langgen_Consts.phrase_structures = ["NS","DS","DSGN","DNGN","NGN","D?N","N?N","D?NN?","DNN?","D?NG?N","D?NNG?","D?NNG","D?NG?N?","D?G?NN"];
dropecho_langgen_Consts.default_ortho = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["ʃ"] != null) {
		_g.setReserved("ʃ","sh");
	} else {
		_g.h["ʃ"] = "sh";
	}
	if(__map_reserved["ʒ"] != null) {
		_g.setReserved("ʒ","zh");
	} else {
		_g.h["ʒ"] = "zh";
	}
	if(__map_reserved["ʧ"] != null) {
		_g.setReserved("ʧ","ch");
	} else {
		_g.h["ʧ"] = "ch";
	}
	if(__map_reserved["ʤ"] != null) {
		_g.setReserved("ʤ","j");
	} else {
		_g.h["ʤ"] = "j";
	}
	if(__map_reserved["ŋ"] != null) {
		_g.setReserved("ŋ","ng");
	} else {
		_g.h["ŋ"] = "ng";
	}
	if(__map_reserved["j"] != null) {
		_g.setReserved("j","y");
	} else {
		_g.h["j"] = "y";
	}
	if(__map_reserved["x"] != null) {
		_g.setReserved("x","kh");
	} else {
		_g.h["x"] = "kh";
	}
	if(__map_reserved["ɣ"] != null) {
		_g.setReserved("ɣ","gh");
	} else {
		_g.h["ɣ"] = "gh";
	}
	if(__map_reserved["ʔ"] != null) {
		_g.setReserved("ʔ","‘");
	} else {
		_g.h["ʔ"] = "‘";
	}
	if(__map_reserved["A"] != null) {
		_g.setReserved("A","á");
	} else {
		_g.h["A"] = "á";
	}
	if(__map_reserved["E"] != null) {
		_g.setReserved("E","é");
	} else {
		_g.h["E"] = "é";
	}
	if(__map_reserved["I"] != null) {
		_g.setReserved("I","í");
	} else {
		_g.h["I"] = "í";
	}
	if(__map_reserved["O"] != null) {
		_g.setReserved("O","ó");
	} else {
		_g.h["O"] = "ó";
	}
	if(__map_reserved["U"] != null) {
		_g.setReserved("U","ú");
	} else {
		_g.h["U"] = "ú";
	}
	$r = _g;
	return $r;
}(this));
dropecho_langgen_Consts.corthsets = (function($this) {
	var $r;
	var _g4 = new haxe_ds_StringMap();
	{
		var value = new haxe_ds_StringMap();
		if(__map_reserved["Default"] != null) {
			_g4.setReserved("Default",value);
		} else {
			_g4.h["Default"] = value;
		}
	}
	{
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["ʃ"] != null) {
			_g.setReserved("ʃ","š");
		} else {
			_g.h["ʃ"] = "š";
		}
		if(__map_reserved["ʒ"] != null) {
			_g.setReserved("ʒ","ž");
		} else {
			_g.h["ʒ"] = "ž";
		}
		if(__map_reserved["ʧ"] != null) {
			_g.setReserved("ʧ","č");
		} else {
			_g.h["ʧ"] = "č";
		}
		if(__map_reserved["ʤ"] != null) {
			_g.setReserved("ʤ","ǧ");
		} else {
			_g.h["ʤ"] = "ǧ";
		}
		if(__map_reserved["j"] != null) {
			_g.setReserved("j","j");
		} else {
			_g.h["j"] = "j";
		}
		var value1 = _g;
		if(__map_reserved["Slavic"] != null) {
			_g4.setReserved("Slavic",value1);
		} else {
			_g4.h["Slavic"] = value1;
		}
	}
	{
		var _g1 = new haxe_ds_StringMap();
		if(__map_reserved["ʃ"] != null) {
			_g1.setReserved("ʃ","sch");
		} else {
			_g1.h["ʃ"] = "sch";
		}
		if(__map_reserved["ʒ"] != null) {
			_g1.setReserved("ʒ","zh");
		} else {
			_g1.h["ʒ"] = "zh";
		}
		if(__map_reserved["ʧ"] != null) {
			_g1.setReserved("ʧ","tsch");
		} else {
			_g1.h["ʧ"] = "tsch";
		}
		if(__map_reserved["ʤ"] != null) {
			_g1.setReserved("ʤ","dz");
		} else {
			_g1.h["ʤ"] = "dz";
		}
		if(__map_reserved["j"] != null) {
			_g1.setReserved("j","j");
		} else {
			_g1.h["j"] = "j";
		}
		if(__map_reserved["x"] != null) {
			_g1.setReserved("x","ch");
		} else {
			_g1.h["x"] = "ch";
		}
		var value2 = _g1;
		if(__map_reserved["German"] != null) {
			_g4.setReserved("German",value2);
		} else {
			_g4.h["German"] = value2;
		}
	}
	{
		var _g2 = new haxe_ds_StringMap();
		if(__map_reserved["ʃ"] != null) {
			_g2.setReserved("ʃ","ch");
		} else {
			_g2.h["ʃ"] = "ch";
		}
		if(__map_reserved["ʒ"] != null) {
			_g2.setReserved("ʒ","j");
		} else {
			_g2.h["ʒ"] = "j";
		}
		if(__map_reserved["ʧ"] != null) {
			_g2.setReserved("ʧ","tch");
		} else {
			_g2.h["ʧ"] = "tch";
		}
		if(__map_reserved["ʤ"] != null) {
			_g2.setReserved("ʤ","dj");
		} else {
			_g2.h["ʤ"] = "dj";
		}
		if(__map_reserved["x"] != null) {
			_g2.setReserved("x","kh");
		} else {
			_g2.h["x"] = "kh";
		}
		var value3 = _g2;
		if(__map_reserved["French"] != null) {
			_g4.setReserved("French",value3);
		} else {
			_g4.h["French"] = value3;
		}
	}
	{
		var _g3 = new haxe_ds_StringMap();
		if(__map_reserved["ʃ"] != null) {
			_g3.setReserved("ʃ","x");
		} else {
			_g3.h["ʃ"] = "x";
		}
		if(__map_reserved["ʧ"] != null) {
			_g3.setReserved("ʧ","q");
		} else {
			_g3.h["ʧ"] = "q";
		}
		if(__map_reserved["ʤ"] != null) {
			_g3.setReserved("ʤ","j");
		} else {
			_g3.h["ʤ"] = "j";
		}
		var value4 = _g3;
		if(__map_reserved["Chinese (pinyin)"] != null) {
			_g4.setReserved("Chinese (pinyin)",value4);
		} else {
			_g4.h["Chinese (pinyin)"] = value4;
		}
	}
	$r = _g4;
	return $r;
}(this));
dropecho_langgen_Consts.vorthsets = (function($this) {
	var $r;
	var _g4 = new haxe_ds_StringMap();
	{
		var value = new haxe_ds_StringMap();
		if(__map_reserved["Ácutes"] != null) {
			_g4.setReserved("Ácutes",value);
		} else {
			_g4.h["Ácutes"] = value;
		}
	}
	{
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["A"] != null) {
			_g.setReserved("A","ä");
		} else {
			_g.h["A"] = "ä";
		}
		if(__map_reserved["E"] != null) {
			_g.setReserved("E","ë");
		} else {
			_g.h["E"] = "ë";
		}
		if(__map_reserved["I"] != null) {
			_g.setReserved("I","ï");
		} else {
			_g.h["I"] = "ï";
		}
		if(__map_reserved["O"] != null) {
			_g.setReserved("O","ö");
		} else {
			_g.h["O"] = "ö";
		}
		if(__map_reserved["U"] != null) {
			_g.setReserved("U","ü");
		} else {
			_g.h["U"] = "ü";
		}
		var value1 = _g;
		if(__map_reserved["Ümlauts"] != null) {
			_g4.setReserved("Ümlauts",value1);
		} else {
			_g4.h["Ümlauts"] = value1;
		}
	}
	{
		var _g1 = new haxe_ds_StringMap();
		if(__map_reserved["A"] != null) {
			_g1.setReserved("A","â");
		} else {
			_g1.h["A"] = "â";
		}
		if(__map_reserved["E"] != null) {
			_g1.setReserved("E","ê");
		} else {
			_g1.h["E"] = "ê";
		}
		if(__map_reserved["I"] != null) {
			_g1.setReserved("I","y");
		} else {
			_g1.h["I"] = "y";
		}
		if(__map_reserved["O"] != null) {
			_g1.setReserved("O","ô");
		} else {
			_g1.h["O"] = "ô";
		}
		if(__map_reserved["U"] != null) {
			_g1.setReserved("U","w");
		} else {
			_g1.h["U"] = "w";
		}
		var value2 = _g1;
		if(__map_reserved["Welsh"] != null) {
			_g4.setReserved("Welsh",value2);
		} else {
			_g4.h["Welsh"] = value2;
		}
	}
	{
		var _g2 = new haxe_ds_StringMap();
		if(__map_reserved["A"] != null) {
			_g2.setReserved("A","au");
		} else {
			_g2.h["A"] = "au";
		}
		if(__map_reserved["E"] != null) {
			_g2.setReserved("E","ei");
		} else {
			_g2.h["E"] = "ei";
		}
		if(__map_reserved["I"] != null) {
			_g2.setReserved("I","ie");
		} else {
			_g2.h["I"] = "ie";
		}
		if(__map_reserved["O"] != null) {
			_g2.setReserved("O","ou");
		} else {
			_g2.h["O"] = "ou";
		}
		if(__map_reserved["U"] != null) {
			_g2.setReserved("U","oo");
		} else {
			_g2.h["U"] = "oo";
		}
		var value3 = _g2;
		if(__map_reserved["Diphthongs"] != null) {
			_g4.setReserved("Diphthongs",value3);
		} else {
			_g4.h["Diphthongs"] = value3;
		}
	}
	{
		var _g3 = new haxe_ds_StringMap();
		if(__map_reserved["A"] != null) {
			_g3.setReserved("A","aa");
		} else {
			_g3.h["A"] = "aa";
		}
		if(__map_reserved["E"] != null) {
			_g3.setReserved("E","ee");
		} else {
			_g3.h["E"] = "ee";
		}
		if(__map_reserved["I"] != null) {
			_g3.setReserved("I","ii");
		} else {
			_g3.h["I"] = "ii";
		}
		if(__map_reserved["O"] != null) {
			_g3.setReserved("O","oo");
		} else {
			_g3.h["O"] = "oo";
		}
		if(__map_reserved["U"] != null) {
			_g3.setReserved("U","uu");
		} else {
			_g3.h["U"] = "uu";
		}
		var value4 = _g3;
		if(__map_reserved["Doubles"] != null) {
			_g4.setReserved("Doubles",value4);
		} else {
			_g4.h["Doubles"] = value4;
		}
	}
	$r = _g4;
	return $r;
}(this));
haxe__$Int32_Int32_$Impl_$._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
seedyrng_Xorshift128Plus.PARAMETER_A = 23;
seedyrng_Xorshift128Plus.PARAMETER_B = 17;
seedyrng_Xorshift128Plus.PARAMETER_C = 26;
seedyrng_Xorshift128Plus.SEED_1 = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(842650776,685298713);
	$r = this1;
	return $r;
}(this));
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
